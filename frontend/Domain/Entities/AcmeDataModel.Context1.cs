//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QProcess.Domain.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using global::Entities;

    public partial class AcmeDataContext : DbContext
    {
        public AcmeDataContext()
            : base("name=AcmeDataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalUser> AdditionalUsers { get; set; }
        public virtual DbSet<Nag> Nags { get; set; }
        public virtual DbSet<Recipient> Recipients { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<MonthlySchedule> MonthlySchedules { get; set; }
    
        public virtual ObjectResult<UserInfo> GetUserInfo(string userID, string appID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var appIDParameter = appID != null ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserInfo>("GetUserInfo", userIDParameter, appIDParameter);
        }
    
        public virtual int UpdateRunTimes(Nullable<int> nagID, Nullable<System.DateTime> runTime, Nullable<bool> fromPaused)
        {
            var nagIDParameter = nagID.HasValue ?
                new ObjectParameter("NagID", nagID) :
                new ObjectParameter("NagID", typeof(int));
    
            var runTimeParameter = runTime.HasValue ?
                new ObjectParameter("RunTime", runTime) :
                new ObjectParameter("RunTime", typeof(System.DateTime));
    
            var fromPausedParameter = fromPaused.HasValue ?
                new ObjectParameter("FromPaused", fromPaused) :
                new ObjectParameter("FromPaused", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRunTimes", nagIDParameter, runTimeParameter, fromPausedParameter);
        }
    }
}
